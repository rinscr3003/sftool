# This is a basic workflow to help you get started with Actions

name: Builder

# Controls when the workflow will run
on: [push, fork, workflow_dispatch]

permissions:
  contents: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows, macos-intel, linux-aarch64, linux-i686, windows-i686]
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - build: macos
            os: macos-latest
            target: aarch64-apple-darwin
          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - build: macos-intel
            os: macos-13
            target: x86_64-apple-darwin
          - build: linux-aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - build: linux-i686
            os: ubuntu-latest
            target: i686-unknown-linux-gnu
          - build: windows-i686
            os: windows-latest
            target: i686-pc-windows-msvc
      fail-fast: false

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Prepare env
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      
      - name: Prepare deps on macOS
        if: runner.os == 'macos'
        run: "brew install coreutils"

      - name: Prepare cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build 
        run: cross build --release --target ${{ matrix.target }}
        env:
          CROSS_NO_WARNINGS: 0
      
      - name: Create Zip Archive and sha256
        if: matrix.os == 'windows-latest'
        run: |
          $version = $env:GITHUB_REF_NAME
          Write-Host "Tag version: $version"
          $zipFile = "sftool-$version-${{matrix.target}}.zip"
          Compress-Archive -Path "target/${{matrix.target}}/release/sftool.exe" -DestinationPath $zipFile
          $hash = Get-FileHash -Path $zipFile -Algorithm SHA256
          Write-Host "SHA256: $($hash.Hash)"
          $hash = Get-FileHash -Algorithm SHA256 -Path $zipFile | Select-Object -ExpandProperty Hash
          $hash | Out-File -Encoding ASCII "$zipFile.sha256"
        shell: pwsh
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Create tar.xz Archive and sha256
        if: matrix.os != 'windows-latest'
        run: |
          version=$GITHUB_REF_NAME
          echo "Tag version: $version"
          tar -cJf "sftool-$version-${{matrix.target}}.tar.xz" -C "target/${{matrix.target}}/release" sftool
          sha256sum "sftool-$version-${{matrix.target}}.tar.xz" > "sftool-$version-${{matrix.target}}.tar.xz.sha256"
        shell: bash
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sftool-${{ matrix.target }}-${{ github.ref_name }}
          path: |
            sftool-*.zip
            sftool-*.tar.xz
            sftool-*.sha256
      
      - name: Create Release and Upload Assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          allowUpdates: true
          generateReleaseNotes: true
          artifacts: |
            sftool-*.zip
            sftool-*.tar.xz
            sftool-*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
